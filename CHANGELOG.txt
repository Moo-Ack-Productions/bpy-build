# Changelog


## [0.4.1] - 2024-06-01


### Fix: Properly install addon if not already installed

Signed-off-by: Mahid Sheikh <mahid@standingpad.org>

### Fix: Removed redundant argument in build_config



### Docs: Added details on name and file restrictions

### Docs: Removed tests.md for now

### Docs: Clarified Getting Started

Co-authored-by: Patrick W. Crawford <theduckcow@live.com>
### Docs: Added missing period to README

### Docs: Added info on using BpyBuild in addon tests

### Docs: Added info on tests in CONTRIBUTING.md

### Docs: Fixed warning in actions guide



### Feat: Add version shorthands like + and ..

The idea of version shorthands is to reduce the need for comically large
config files with giant lists of versions. Instead of the following:

```yaml
install_versions:
  - 2.8
  ...
  - 4.0
```

Developers can now do this:

```yaml
install_versions:
  - 2.8..4.0
```

Way better for developer experience

Signed-off-by: Mahid Sheikh <mahid@standingpad.org>

### Feat: Added string input checks

Seeing as build configs are basically untrusted user input, the current
system of not checking if the strings are valid is a pretty big security
risk. As such, BpyBuild now checks multiple parts of the config to make
sure that strings do not contain harmful characters, by limiting what
characters are allowed in the first place.

### Feat: Improved errors for config issues

### Feat: Added error handling for config parsing

### Feat: Actions can now be declared without a script



### Refactor: Changed how install_versions is checked

Previously we checked install_versions with a try-except statement that
would attempt to convert the value to a float and throw an error if it
failed. However, floats in YAML are actual floats, so we can just check
if the float is of the type float with isinstance(ver, float)

### Refactor: Migrated from cattrs to manual parsing

Although cattrs was useful for parsing the config data to an attrs
object, it had issues with errors being undecipherable to the end user.
In addition, cattrs seemed too overkill for a simple config. Thus, we've
moved away from cattrs and implemented our own basic parser to manually
parse and construct the Config object, with better errors.



### Style: Added docs for BpyError and BpyWarning

### Style: Applied Ruff's import sorter to all files

### Style: Updated codedocs

### Style: Switch to native types with __futures__

### Style: Added TypeDicts for annotation YAML data



### Test: Remove xgettext-replacement test

Signed-off-by: Mahid Sheikh <mahid@standingpad.org>


<!-- generated by git-cliff -->

## [0.4.0] - 2024-04-18


### Fix: Add parent folder of script to sys.path



### Docs: Redone readme and made Getting Started

### Docs: added a getting started section

### Docs: added info on argument-less main

### Docs: removed working dir references in docs

### Docs: added info on post_install in tests for todo

### Docs: Added docs for Api object



### Feat: added backwards compat for old actions

### Feat: add path of missing file in error



### Refactor: removed circular import



### Style: Reduced indentation



### Test: MCprep tests now download in parallel

### Test: added MCprep tests for translation builds

### Test: added tests with MCprep's source tree

### Test: added proper check for post install hooks

### Test: added test checking for non-existent configs

### Test: added hooks test

### Tests: added build tests

### Tests: Modified actions to pass tests

### Test: added basic test for help argument

### Test: Moved test files


<!-- generated by git-cliff -->

## [0.3.0] - 2024-02-02


### Fix: Fixed issue with not finding .X0 versions



### Test: Added 2.8 to test file


## [0.3.0-alpha-2] - 2023-12-19

## [0.3.0-alpha-1] - 2023-09-03


### Added support for auto-installing

Working on my birthday... *sigh*

Anyway, Bpy-Build now supports automatically installing to specific
Blender versions, either through the install_versions tag or the -v
argument. Now Bpy-Build's basic functionality has been returned, yay...

Also happy birthday to me ^_^

### Changed actions to be Python based

Python based actions means less code to maintain on my end, and more
flexibility on the developer's end, win-win.

Now instead of forcing developers to use a limited subset of commands
and non-portable shell commands (curse you Windows), developers can now
define actions in Python like any regular Python script. No API, no
nothing, just the assumption that the script will be ran in the
intermediate directory.

### Updated test recipe in Justfile

### Changes to actions syntax

To make parsing easier, actions will now have the following syntax:
!action <action args>

This is not yet final, especially as I learn more on how YAML works, but
the final version will likely be simmilar.

### Added basic argument parsing and attrs dependency

Since none of the existing libraries for argument parsing have quite
what I want, I decided to write my own argument parser in Python using a
class and attrs (https://www.attrs.org).

Why attrs instead of regular dataclasses? While dataclasses are based on
attrs design wise, attrs has the following advantages:
- Better defaults (good defaults are important)
- Fine control over the class, but nothing too complicated
- Version independence

The last one is important. Bpy-Build needs to support Python 3.9 and
above. Many good dataclass features meanwhile are 3.10+ however, which
means we are unable to use them. This discrepency in version support
will also only get wider as more time passes, hence why version
independence is so important.

Attrs does not have any runtime costs, it performs changes to the actual
class itself and Python bytecode, so the only costs are in Python's
compile time, most of which aren't massive (and likely improved in
Python 3.11 anyway)

While the class makes it seem like YAML will continue to be the config
file format, I'm still deciding between YAML and TOML

### Updated pre-commit hook for Mypy

We forgot pretty printing and specifying the folder, whoops


<!-- generated by git-cliff -->
